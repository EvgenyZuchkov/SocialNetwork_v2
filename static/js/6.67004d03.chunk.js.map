{"version":3,"sources":["Components/HOC/withAuthRedirect.js","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx","Components/Dialogs/Dialogs.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","src","avatar","activeClassName","activeLink","name","Message","message","AddMessageForm","validationSchema","yup","shape","newMessageBody","typeError","required","max","initialValues","validateOnBlur","onSubmit","values","setSubmitting","sendMessage","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","messageForm","htmlFor","type","placeholder","onChange","onBlur","value","textInputError","textInput","error","disabled","onClick","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","avatarElements","a","messagesElements","messages","m","dialogsAva","dialogsItems","textareaBlock","compose","dispatch","sendMessageCreator","module","exports"],"mappings":"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","file":"static/js/6.67004d03.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnetctedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnetctedAuthRedirectComponent\r\n}","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src={props.avatar}/>\r\n            <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import s from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Formik} from \"formik\";\r\nimport * as yup from 'yup'\r\nimport s from \"./Dialogs.module.css\";\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const validationSchema = yup.object().shape({\r\n        newMessageBody: yup.string().typeError('It must be a string')\r\n            .required('Required')\r\n            .max(20, 'Too Long!')\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                newMessageBody: ''\r\n            }}\r\n            validateOnBlur\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                props.sendMessage(values.newMessageBody)\r\n            }}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({\r\n                  values, errors, touched,\r\n                  handleChange, handleBlur,\r\n                  isValid, handleSubmit, dirty\r\n              }) => (\r\n                <form className={s.messageForm}>\r\n                    <div>\r\n                        <label htmlFor={<code>newMessageBody</code>}>Message</label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            name=\"newMessageBody\"\r\n                            placeholder='Write a message...'\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            value={values.newMessageBody}\r\n                            className={\r\n                                errors.newMessageBody && touched.newMessageBody\r\n                                    ? `${s.textInputError}`\r\n                                    : `${s.textInput}`\r\n                            }\r\n                        />\r\n                    </div>\r\n                    {touched.newMessageBody && errors.newMessageBody &&\r\n                    <p className={s.error}> {errors.newMessageBody} </p>}\r\n                    <div>\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={!isValid || !dirty}\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddMessageForm;","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let avatarElements = state.dialogs.map(a => <DialogItem avatar={a.avatar} key={a.id} id={a.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsAva}>\r\n                {avatarElements}\r\n            </div>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div className={s.textareaBlock}>\r\n                <AddMessageForm sendMessage={props.sendMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport {sendMessageCreator} from \"../../Redux/Dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Ez3Y\",\"dialogsAva\":\"Dialogs_dialogsAva__2fD2T\",\"dialogsItems\":\"Dialogs_dialogsItems__291Of\",\"messages\":\"Dialogs_messages__2THje\",\"textareaBlock\":\"Dialogs_textareaBlock__1HOUs\",\"dialog\":\"Dialogs_dialog__17Rrw\",\"activeLink\":\"Dialogs_activeLink__1UC8I\",\"messageForm\":\"Dialogs_messageForm__3qeyi\",\"error\":\"Dialogs_error__2D5nS\",\"textInputError\":\"Dialogs_textInputError__3XbYW\"};"],"sourceRoot":""}