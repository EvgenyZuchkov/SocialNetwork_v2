{"version":3,"sources":["Components/Login/Login.module.css","Components/Login/LoginForm.jsx","Components/Login/Login.jsx"],"names":["module","exports","LoginForm","props","validationSchema","yup","shape","email","required","password","min","initialValues","remember","validateOnBlur","onSubmit","values","setSubmitting","setFieldError","setStatus","login","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","status","className","s","loginForm","type","name","placeholder","onChange","onBlur","value","textInputError","textInput","error","checkbox","formSummaryError","disabled","onClick","button","connect","state","isAuth","auth","to"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,MAAQ,qBAAqB,eAAiB,8BAA8B,iBAAmB,gCAAgC,OAAS,sBAAsB,SAAW,0B,mHCkG9OC,EA7FG,SAACC,GACf,IAAMC,EAAmBC,MAAaC,MAAM,CACxCC,MAAOF,MACFE,MAAM,oBACNC,SAAS,YACdC,SAAUJ,MACLK,IAAI,EAAG,0CACPF,SAAS,cAGlB,OACI,8BACI,cAAC,IAAD,CACIG,cAAe,CACXJ,MAAO,GACPE,SAAU,GACVG,SAAU,IAEdC,gBAAc,EACdC,SAAU,SAACC,EAAD,GAAwD,IAA9CC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC9Cf,EAAMgB,MAAMJ,EAAOR,MAAOQ,EAAON,SAAUM,EAAOH,SAAUI,EAAeC,EAAeC,GAE1FF,GAAc,IAElBZ,iBAAkBA,EAZtB,SAcK,gBACKW,EADL,EACKA,OAAQK,EADb,EACaA,OAAQC,EADrB,EACqBA,QAChBC,EAFL,EAEKA,aAAcC,EAFnB,EAEmBA,WACdC,EAHL,EAGKA,QAASC,EAHd,EAGcA,aAAcC,EAH5B,EAG4BA,MAAOC,EAHnC,EAGmCA,OAHnC,OAKG,uBAAMC,UAAWC,IAAEC,UAAnB,UACI,4BACI,uBAAOC,KAAK,OACLC,KAAK,QACLC,YAAY,mBACZC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOR,MACdqB,UACIR,EAAOb,OAASc,EAAQd,MAAxB,UACSsB,IAAEQ,gBADX,UAESR,IAAES,eAIzBjB,EAAQd,OAASa,EAAOb,OAAS,oBAAGqB,UAAWC,IAAEU,MAAhB,cAAyBnB,EAAOb,MAAhC,OAClC,4BACI,uBAAOwB,KAAK,WACLC,KAAK,WACLC,YAAY,sBACZC,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAON,SACdmB,UACIR,EAAOX,UAAYY,EAAQZ,SAA3B,UACSoB,IAAEQ,gBADX,UAESR,IAAES,eAIzBjB,EAAQZ,UAAYW,EAAOX,UAAY,oBAAGmB,UAAWC,IAAEU,MAAhB,cAAyBnB,EAAOX,SAAhC,OACxC,gCACI,uBAAOsB,KAAK,WACLC,KAAK,WACLE,SAAUZ,EACVa,OAAQZ,EACRa,MAAOrB,EAAOH,SACdgB,UAAWC,IAAEW,WANxB,kBASCnB,EAAQT,UAAYQ,EAAOR,UAAY,oBAAGgB,UAAWC,IAAEU,MAAhB,cAAyBnB,EAAOR,SAAhC,OACxC,qBAAKgB,UAAWC,IAAEY,iBAAlB,SACKd,IAEL,8BACI,wBACII,KAAK,SACLW,UAAWlB,IAAYE,EACvBiB,QAASlB,EACTG,UAAWC,IAAEe,OAJjB,8BCxDbC,uBALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAIiB,CAAC5B,WAA1B0B,EAnBD,SAAC1C,GAEX,OAAIA,EAAM4C,OACC,cAAC,IAAD,CAAUE,GAAI,aAIrB,gCACI,oBAAIrB,UAAWC,IAAEV,MAAjB,qBACA,cAAC,EAAD,CAAWA,MAAOhB,EAAMgB","file":"static/js/7.b9235a30.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3osuV\",\"loginForm\":\"Login_loginForm__2iJuj\",\"error\":\"Login_error__XG4ch\",\"textInputError\":\"Login_textInputError__3_azO\",\"formSummaryError\":\"Login_formSummaryError__ErGxL\",\"button\":\"Login_button__3uesR\",\"checkbox\":\"Login_checkbox__3JWJV\"};","import React from \"react\";\r\nimport {Formik} from 'formik';\r\nimport s from \"./Login.module.css\"\r\nimport * as yup from 'yup'\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    const validationSchema = yup.object().shape({\r\n        email: yup.string()\r\n            .email('Email is invalid')\r\n            .required('Required'),\r\n        password: yup.string()\r\n            .min(6, 'Password must be at least 6 characters')\r\n            .required('Required')\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    email: '',\r\n                    password: '',\r\n                    remember: ''\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={(values, {setSubmitting, setFieldError, setStatus}) => {\r\n                    props.login(values.email, values.password, values.remember, setSubmitting, setFieldError, setStatus)\r\n\r\n                    setSubmitting(false)\r\n                }}\r\n                validationSchema={validationSchema}\r\n            >\r\n                {({\r\n                      values, errors, touched,\r\n                      handleChange, handleBlur,\r\n                      isValid, handleSubmit, dirty, status\r\n                  }) => (\r\n                    <form className={s.loginForm}>\r\n                        <p>\r\n                            <input type='text'\r\n                                   name='email'\r\n                                   placeholder='Enter your email'\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   value={values.email}\r\n                                   className={\r\n                                       errors.email && touched.email\r\n                                           ? `${s.textInputError}`\r\n                                           : `${s.textInput}`\r\n                                   }\r\n                            />\r\n                        </p>\r\n                        {touched.email && errors.email && <p className={s.error}> {errors.email} </p>}\r\n                        <p>\r\n                            <input type='password'\r\n                                   name='password'\r\n                                   placeholder='Enter your password'\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   value={values.password}\r\n                                   className={\r\n                                       errors.password && touched.password\r\n                                           ? `${s.textInputError}`\r\n                                           : `${s.textInput}`\r\n                                   }\r\n                            />\r\n                        </p>\r\n                        {touched.password && errors.password && <p className={s.error}> {errors.password} </p>}\r\n                        <div>\r\n                            <input type='checkbox'\r\n                                   name='remember'\r\n                                   onChange={handleChange}\r\n                                   onBlur={handleBlur}\r\n                                   value={values.remember}\r\n                                   className={s.checkbox}\r\n                            /> Remember me\r\n                        </div>\r\n                        {touched.remember && errors.remember && <p className={s.error}> {errors.remember} </p>}\r\n                        <div className={s.formSummaryError}>\r\n                            {status}\r\n                        </div>\r\n                        <div>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={!isValid || !dirty}\r\n                                onClick={handleSubmit}\r\n                                className={s.button}\r\n                            >\r\n                                Login\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LoginForm;","import React from \"react\";\r\nimport s from \"./Login.module.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/Auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nconst Login = (props) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={s.login}>Sign Up</h1>\r\n            <LoginForm login={props.login}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}